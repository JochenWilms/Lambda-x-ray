'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _performanceNode = require('performance-node');

var _performanceNode2 = _interopRequireDefault(_performanceNode);

var _package = require('../package');

var _package2 = _interopRequireDefault(_package);

var _addToReport = require('./addToReport');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getConfig() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _config$autoMeasure = config.autoMeasure,
      autoMeasure = _config$autoMeasure === undefined ? true : _config$autoMeasure;

  return {
    autoMeasure
  };
}

function addTimelineMeasures(pluginInstance) {
  var timeline = pluginInstance.timeline;

  if (!(timeline instanceof _performanceNode2.default)) {
    return false;
  }
  var entries = timeline.getEntriesByType('mark');
  var names = entries.filter(function (entry) {
    return (entry.name || '').match(/^(start|end):.+/);
  }).map(function (entry) {
    return entry.name;
  });
  // loop through each mark and make sure there is a start and end
  // if so, measure
  names.forEach(function (name) {
    if (name.match(/^(start):.+/)) {
      var baseName = name.replace(/(start|end):(.+)/, '$2');
      // make sure there is an end mark as well
      if (names.find(function (n) {
        return n === `end:${baseName}`;
      })) {
        timeline.measure(`measure:${baseName}`, `start:${baseName}`, `end:${baseName}`);
      }
    }
  });
  return true;
}

var TracePlugin = function () {
  function TracePlugin() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var invocationInstance = arguments[1];

    _classCallCheck(this, TracePlugin);

    this.invocationInstance = invocationInstance;
    this.config = getConfig(config);
    this.metrics = [];
    this.timeline = new _performanceNode2.default({ timestamp: true });
    this.hooks = {
      'post:setup': this.postSetup.bind(this),
      'pre:report': this.preReport.bind(this)
    };
    return this;
  }

  _createClass(TracePlugin, [{
    key: 'postSetup',
    value: function postSetup() {
      this.invocationInstance.context.iopipe.mark = {
        start: this.start.bind(this),
        end: this.end.bind(this)
      };
      this.invocationInstance.context.iopipe.measure = this.measure.bind(this);
    }
  }, {
    key: 'preReport',
    value: function preReport() {
      if (this.config.autoMeasure) {
        addTimelineMeasures(this);
      }
      (0, _addToReport.addToReport)(this);
    }
  }, {
    key: 'start',
    value: function start(name) {
      this.timeline.mark(`start:${name}`);
    }
  }, {
    key: 'end',
    value: function end(name) {
      this.timeline.mark(`end:${name}`);
    }
  }, {
    key: 'measure',
    value: function measure(name, startMark, endMark) {
      this.timeline.measure(`measure:${name}`, `start:${startMark}`, `end:${endMark}`);
    }
  }, {
    key: 'meta',
    get: function get() {
      return { name: _package2.default.name, version: _package2.default.version, homepage: _package2.default.homepage };
    }
  }]);

  return TracePlugin;
}();

module.exports = function (pluginOpts) {
  return function (invocationInstance) {
    return new TracePlugin(pluginOpts, invocationInstance);
  };
};